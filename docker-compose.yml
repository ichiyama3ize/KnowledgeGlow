version: '3.8'

services:
  # Go メインアプリケーション
  go-app:
    build:
      context: ./go-app
      dockerfile: Dockerfile
    container_name: knowledge-go-app
    ports:
      - "8080:8080"
    environment:
      - AI_SERVICE_URL=http://python-ai:8001
      - DATABASE_PATH=/app/data/knowledge.db
      - LOG_LEVEL=INFO
      - PORT=8080
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
      - ./exports:/app/exports
    depends_on:
      - python-ai
    networks:
      - knowledge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Python AIサービス
  python-ai:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: knowledge-python-ai
    ports:
      - "8001:8001"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - CHROMA_DB_PATH=/app/data/chroma_db
      - LOG_LEVEL=INFO
      - PORT=8001
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./ai-service:/app
    networks:
      - knowledge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/ai/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 開発用データベース管理ツール
  db-admin:
    image: adminer:latest
    container_name: knowledge-db-admin
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=sqlite
    volumes:
      - ./data:/data
    networks:
      - knowledge-network
    restart: unless-stopped
    profiles:
      - dev

  # ログ監視ツール
  log-monitor:
    image: grafana/loki:latest
    container_name: knowledge-loki
    ports:
      - "3100:3100"
    volumes:
      - ./logs:/var/log
      - ./config/loki.yml:/etc/loki/local-config.yaml
    networks:
      - knowledge-network
    restart: unless-stopped
    profiles:
      - monitoring

  # メトリクス監視
  prometheus:
    image: prom/prometheus:latest
    container_name: knowledge-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - knowledge-network
    restart: unless-stopped
    profiles:
      - monitoring

  # 監視ダッシュボード
  grafana:
    image: grafana/grafana:latest
    container_name: knowledge-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    networks:
      - knowledge-network
    restart: unless-stopped
    profiles:
      - monitoring

  # 開発用リバースプロキシ
  nginx:
    image: nginx:alpine
    container_name: knowledge-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - go-app
      - python-ai
    networks:
      - knowledge-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  prometheus_data:
  grafana_data:

networks:
  knowledge-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
